/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package test;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class kafkatest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"kafkatest\",\"namespace\":\"test\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"random\",\"type\":\"int\"},{\"name\":\"data\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int id;
  @Deprecated public int random;
  @Deprecated public java.lang.CharSequence data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public kafkatest() {}

  /**
   * All-args constructor.
   */
  public kafkatest(java.lang.Integer id, java.lang.Integer random, java.lang.CharSequence data) {
    this.id = id;
    this.random = random;
    this.data = data;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return random;
    case 2: return data;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: random = (java.lang.Integer)value$; break;
    case 2: data = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'random' field.
   */
  public java.lang.Integer getRandom() {
    return random;
  }

  /**
   * Sets the value of the 'random' field.
   * @param value the value to set.
   */
  public void setRandom(java.lang.Integer value) {
    this.random = value;
  }

  /**
   * Gets the value of the 'data' field.
   */
  public java.lang.CharSequence getData() {
    return data;
  }

  /**
   * Sets the value of the 'data' field.
   * @param value the value to set.
   */
  public void setData(java.lang.CharSequence value) {
    this.data = value;
  }

  /** Creates a new kafkatest RecordBuilder */
  public static test.kafkatest.Builder newBuilder() {
    return new test.kafkatest.Builder();
  }
  
  /** Creates a new kafkatest RecordBuilder by copying an existing Builder */
  public static test.kafkatest.Builder newBuilder(test.kafkatest.Builder other) {
    return new test.kafkatest.Builder(other);
  }
  
  /** Creates a new kafkatest RecordBuilder by copying an existing kafkatest instance */
  public static test.kafkatest.Builder newBuilder(test.kafkatest other) {
    return new test.kafkatest.Builder(other);
  }
  
  /**
   * RecordBuilder for kafkatest instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<kafkatest>
    implements org.apache.avro.data.RecordBuilder<kafkatest> {

    private int id;
    private int random;
    private java.lang.CharSequence data;

    /** Creates a new Builder */
    private Builder() {
      super(test.kafkatest.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(test.kafkatest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.random)) {
        this.random = data().deepCopy(fields()[1].schema(), other.random);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.data)) {
        this.data = data().deepCopy(fields()[2].schema(), other.data);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing kafkatest instance */
    private Builder(test.kafkatest other) {
            super(test.kafkatest.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.random)) {
        this.random = data().deepCopy(fields()[1].schema(), other.random);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.data)) {
        this.data = data().deepCopy(fields()[2].schema(), other.data);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.Integer getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public test.kafkatest.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public test.kafkatest.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'random' field */
    public java.lang.Integer getRandom() {
      return random;
    }
    
    /** Sets the value of the 'random' field */
    public test.kafkatest.Builder setRandom(int value) {
      validate(fields()[1], value);
      this.random = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'random' field has been set */
    public boolean hasRandom() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'random' field */
    public test.kafkatest.Builder clearRandom() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'data' field */
    public java.lang.CharSequence getData() {
      return data;
    }
    
    /** Sets the value of the 'data' field */
    public test.kafkatest.Builder setData(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.data = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'data' field has been set */
    public boolean hasData() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'data' field */
    public test.kafkatest.Builder clearData() {
      data = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public kafkatest build() {
      try {
        kafkatest record = new kafkatest();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.random = fieldSetFlags()[1] ? this.random : (java.lang.Integer) defaultValue(fields()[1]);
        record.data = fieldSetFlags()[2] ? this.data : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
